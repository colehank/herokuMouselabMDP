// Generated by CoffeeScript 2.2.2
// coffeelint: disable=max_line_length, indentation
var BLOCKS, CONDITION, DEBUG, DEMO, DEMO_TRIALS, GOFAST, GOSLOW, N_TRIAL, OBJECT_LEVEL_PR, PARAMS, SCORE, SHOW_PARTICIPANT, SKIP_INSTRUCTIONS, STRUCTURE, TALK, TRIALS, XXX, calculateBonus, createStartButton, getTrials, initializeExperiment, psiturk, saveData, with_feedback, with_meta_level_FB, with_object_level_FB;

DEBUG = false;

TALK = true;

SHOW_PARTICIPANT = false;

XXX = void 0;

if (DEBUG) {
  console.log("X X X X X X X X X X X X X X X X X\n X X X X X DEBUG  MODE X X X X X\nX X X X X X X X X X X X X X X X X");
  CONDITION = 1;
} else {
  console.log("# =============================== #\n# ========= NORMAL MODE ========= #\n# =============================== #");
  console.log('16/01/18 12:38:03 PM');
  CONDITION = parseInt(condition);
}

if (mode === "{{ mode }}") {
  DEMO = true;
  CONDITION = 1;
}

with_feedback = CONDITION > 0;

with_meta_level_FB = CONDITION === 1;

with_object_level_FB = CONDITION === 2;

BLOCKS = void 0;

PARAMS = void 0;

TRIALS = void 0;

OBJECT_LEVEL_PR = void 0;

GOSLOW = false;

GOFAST = false;

DEMO_TRIALS = void 0;

STRUCTURE = void 0;

N_TRIAL = void 0;

SCORE = 0;

calculateBonus = void 0;

getTrials = void 0;

SKIP_INSTRUCTIONS = false;

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

psiturk.recordUnstructuredData('condition', CONDITION);

psiturk.recordUnstructuredData('with_feedback', with_feedback);

psiturk.recordUnstructuredData('with_meta_level_FB', with_meta_level_FB);

psiturk.recordUnstructuredData('with_object_level_FB', with_object_level_FB);

saveData = function() {
  return new Promise(function(resolve, reject) {
    var timeout;
    timeout = delay(10000, function() {
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

$(window).resize(function() {
  return checkWindowSize(800, 600, $('#jspsych-target'));
});

$(window).resize();

$(window).on('load', function() {
  var loadTimeout, slowLoad;
  // Load data and test connection to server.
  slowLoad = function() {
    var ref;
    return (ref = $('slow-load')) != null ? ref.show() : void 0;
  };
  loadTimeout = delay(12000, slowLoad);
  psiturk.preloadImages(['static/images/spider.png']);
  return delay(300, function() {
    var id;
    console.log('Loading data');
    PARAMS = {
      inspectCost: 1,
      startTime: Date(Date.now()),
      bonusRate: .002,
      // variance: ['2_4_24', '24_4_2'][CONDITION]
      branching: '312',
      with_feedback: with_feedback,
      condition: CONDITION
    };
    psiturk.recordUnstructuredData('params', PARAMS);
    if (PARAMS.variance) {
      id = `${PARAMS.branching}_${PARAMS.variance}`;
    } else {
      id = `${PARAMS.branching}`;
    }
    STRUCTURE = loadJson("static/json/structure/312.json");
    TRIALS = loadJson("static/json/mcrl_trials/increasing_prs.json");
    console.log(`loaded ${(TRIALS != null ? TRIALS.length : void 0)} trials`);
    OBJECT_LEVEL_PR = loadJson("static/json/object_prs.json");
    getTrials = (function() {
      var idx, t;
      t = _.shuffle(TRIALS);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    if (DEBUG || TALK) {
      createStartButton();
      return clearTimeout(loadTimeout);
    } else {
      console.log('Testing saveData');
      if (DEMO) {
        clearTimeout(loadTimeout);
        return delay(500, createStartButton);
      } else {
        return saveData().then(function() {
          clearTimeout(loadTimeout);
          return delay(500, createStartButton);
        }).catch(function() {
          clearTimeout(loadTimeout);
          return $('#data-error').show();
        });
      }
    }
  });
});

createStartButton = function() {
  if (DEBUG || TALK) {
    initializeExperiment();
    return;
  }
  if (DEMO) {
    $('#jspsych-target').append("\nPlease select which condition you'd like to try. Mark the checkbox below if you want to skip\nthe instructions and go straight to the training trials.\n<br><br>\n<b>Skip instructions:</b> <input type=\"checkbox\" id=\"skipinstruct\">\n<br><br>\n<div class='center'>\n  <button class='btn btn-primary btn-lg centered' id=\"cond0\">No Feedback</button>\n  <button class='btn btn-primary btn-lg centered' id=\"cond1\">Metacognitive Feedback</button>\n  <button class='btn btn-primary btn-lg centered' id=\"cond2\">Action Feedback</button>\n</div>");
    [0, 1, 2].forEach(function(i) {
      return $(`#cond${i}`).click(function() {
        console.log(i);
        CONDITION = i;
        SKIP_INSTRUCTIONS = $("#skipinstruct").prop('checked');
        with_feedback = CONDITION > 0;
        with_meta_level_FB = CONDITION === 1;
        with_object_level_FB = CONDITION === 2;
        return initializeExperiment();
      });
    });
  }
  $('#load-icon').hide();
  return $('#slow-load').hide();
};

// $('#success-load').show()
// $('#load-btn').click initializeExperiment
initializeExperiment = function() {
  var Block, ButtonBlock, MouselabBlock, QuizLoop, TextBlock, bonus_text, divider, divider_intro_training, divider_training_test, experiment_timeline, finish, fullMessage, img, instruct_loop, instructions, intro0, intro1, intro2, intro3, nodeValuesDescription, post_test, pre_test, prompt_resubmit, quiz, reprompt, reset_score, save_data, survey, talk_demo, test_block_intro, text, training, verbal_responses;
  $('#jspsych-target').html('');
  console.log('INITIALIZE EXPERIMENT');
  //  ======================== #
  //  ========= TEXT ========= #
  //  ======================== #

  // These functions will be executed by the jspsych plugin that
  // they are passed to. String interpolation will use the values
  // of global variables defined in this file at the time the function
  // is called.
  text = {
    debug: function() {
      if (DEBUG) {
        return "`DEBUG`";
      } else {
        return '';
      }
    }
  };
  // ================================= #
  // ========= BLOCK CLASSES ========= #
  // ================================= #
  Block = class Block {
    constructor(config) {
      _.extend(this, config);
      this._block = this; // allows trial to access its containing block for tracking state
      if (this._init != null) {
        this._init();
      }
    }

  };
  TextBlock = (function() {
    class TextBlock extends Block {};

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = [];

    return TextBlock;

  }).call(this);
  ButtonBlock = (function() {
    class ButtonBlock extends Block {};

    ButtonBlock.prototype.type = 'button-response';

    ButtonBlock.prototype.is_html = true;

    ButtonBlock.prototype.choices = ['Continue'];

    ButtonBlock.prototype.button_html = '<button class="btn btn-primary btn-lg">%choice%</button>';

    return ButtonBlock;

  }).call(this);
  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, j, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };
  MouselabBlock = (function() {
    class MouselabBlock extends Block {
      _init() {
        _.extend(this, STRUCTURE);
        return this.trialCount = 0;
      }

    };

    MouselabBlock.prototype.type = 'mouselab-mdp';

    MouselabBlock.prototype.playerImage = 'static/images/spider.png';

    // moveDelay: PARAMS.moveDelay
    // clickDelay: PARAMS.clickDelay
    // moveEnergy: PARAMS.moveEnergy
    // clickEnergy: PARAMS.clickEnergy
    MouselabBlock.prototype.lowerMessage = "<b>用$1点击节点来获取他的值<br>\n请用方向键来移动</b>";

    return MouselabBlock;

  }).call(this);
  //  ============================== #
  //  ========= EXPERIMENT ========= #
  //  ============================== #
  img = function(name) {
    return `<img class='display' src='static/images/${name}.png'/>`;
  };
  nodeValuesDescription = (function() {
    switch (PARAMS.variance) {
      case "6_6_6":
        return "A node can have value -10, -5, 5, or 10. All values are equally likely.";
      case "2_4_24":
        return "The more steps it takes to reach a node, the more variable its value\ntends to be: The value of a node you can reach in **one** step is equally\nlikely to be **-4, -2, 2, or 4**. The value of a node you can reach in **two**\nsteps is equally likely to be **-8, -4, 4, or 8**. Finally,  the value of a\nnode you can reach in **three** steps is equally likely to be **-48, -24, 24,\nor 48**.";
      case "24_4_2":
        return "The more steps it takes to reach a node, the less variable its value\ntends to be: The value of a node you can reach in **one** step is equally\nlikely to be **-48, -24, 24, or 48**. The value of a node you can reach in\n**two** steps is equally likely to be **-8, -4, 4, or 8**. Finally,  the value\nof a node you can reach in **three** steps is equally likely to be  -4, -2,\n2, or 4.";
    }
  })();
  
  // instruct_loop = new Block
  //   timeline: [instructions, quiz]
  //   loop_function: (data) ->
  //     for c in data[1].correct
  //       if not c
  //         return true  # try again
  //     psiturk.finishInstructions()
  //     psiturk.saveData()
  //     return false
  fullMessage = "";
  reset_score = new Block({
    type: 'call-function',
    func: function() {
      return SCORE = 0;
    }
  });
  divider = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: center;'> Press <code>space</code> to continue.</div>";
    }
  });
  divider_training_test = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: center;'> 恭喜！您已经完成了训练。 <br/> <br/> 点击 <code>空格</code> 进入正式实验</div>";
    }
  });
  test_block_intro = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown(` <h1>正式测试</h1>\n欢迎来到正式测试! 在此，您可以使用你训练中学会的技巧来获得奖金。 具体而言， ${bonus_text('long')} <br/> 为了感谢您参与到现在,我们将从 **$50**开始。\n 祝您好运! \n <div style='text-align: center;'> 点击 <code>空格</code> 继续。 </div>`);
    }
  });
  instructions = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      return [
        markdown(" <h1> Web of Cash </h1>\n\n In this HIT, you will play a game called *Web of Cash*. You will guide a\n money-loving spider through a spider web. When you land on a gray circle\n (a ***node***) the value of the node is added to your score.\n\n You will be able to move the spider with the arrow keys, but only in the direction\n of the arrows between the nodes. The image below shows the web that you will be navigating when the game starts.\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash-unrevealed.png'/>\n"),
        //psiturk.finishInstructions()
        markdown("## Node Inspector\n\nIt's hard to make good decision when you can't see what you will get!\nFortunately, you will have access to a ***node inspector*** which can reveal\nthe value of a node. To use the node inspector, simply ***click on a node***. The image below illustrates how this works. \n\n**Note:** you can only use the node inspector when you're on the first\nnode. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\n  "),
        markdown("## Rewards and Costs\n- Each node of the web either contains a reward of up to <b><font color='green'>$48</font></b> or a loss of up to <b><font color='red'>$-48</font></b>\n- You can find out about a node's loss or reward by using the node inspector.\n- The fee for using the node inspector is <b>$1 per click</b>.\n\n"),
        markdown("## Additional Information\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n- Every time you play this game the rewards on the web will be different. So you have to make a new plan every time. \n- **You must spend *at least* 7 seconds on each round.** If you finish a round early, you'll have to wait until 7 seconds have\npassed.      \n\n  "),
        markdown(`## Practice makes perfect\n\n- You can get better at planning through practice. \n- In the first 10 trials, you will practice playing *Web of Cash*. After that, there will be a test block where you can use what you have learned to earn a bonus in the test block. \n- The better you perform, the higher your bonus will be.\n${(with_feedback ? "- An intelligent tutor will give you helpful feedback on how you decide what to do." : void 0)}\n     `),
        markdown("## Quiz\n\nBefore you can begin playing *Web of Cash*, you must pass a quiz to show\nthat you understand the rules. If you get any of the questions\nincorrect, you will be brought back to the instructions to review and\ntry the quiz again.")
      ];
    }
  });
  divider_intro_training = new TextBlock({
    text: function() {
      SCORE = 0;
      return "  <h1>Training</h1>  Congratulations! You have completed the instructions. Next, you will enter a training block where you can practice planning 10 times. After that, you will enter test block where you can use what you have learned to earn a bonus. <br/> Press <code>space</code> to start the training block.";
    }
  });
  intro3 = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<h1>Training block</h1> <div style='text-align: center;'> You will now enter a training block where you can practice playing Web of Cash. After that, there will be a test block where you can use what you have learned to earn a bonus. <br/> Press <code>space</code> to start the training block.</div>";
    }
  });
  intro0 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("  <h1> Web of Cash </h1>\n\n  In this HIT, you will play a game called *Web of Cash*. You will guide a\n  money-loving spider through a spider web. When you land on a gray circle\n  (a ***node***) the value of the node is added to your score.\n\n  You will be able to move the spider with the arrow keys, but only in the direction\n  of the arrows between the nodes. The image below shows the web that you will be navigating when the game starts.\n\n <img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash-unrevealed.png'/>\n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  //lowerMessage: 'Move with the arrow keys.'
  //stateDisplay: 'never'
  //timeline: getTrials 0

  //   train_basic2 = new MouselabBlock
  //    blockName: 'train_basic2'
  //    stateDisplay: 'always'
  //    prompt: ->
  //      markdown """
  //      ## Some nodes are more important than others

  //{nodeValuesDescription} Please take a look at the example below to see what this means.

  //      Try a few more rounds now!
  //    """
  //    lowerMessage: 'Move with the arrow keys.'
  //    timeline: getTrials 5

  //  train_hidden = new MouselabBlock
  //    blockName: 'train_hidden'
  //    stateDisplay: 'never'
  //    prompt: ->
  //      markdown """
  //      ## Hidden Information

  //      Nice job! When you can see the values of each node, it's not too hard to
  //      take the best possible path. Unfortunately, you can't always see the
  //      value of the nodes. Without this information, it's hard to make good
  //      decisions. Try completing a few more rounds.
  //    """
  //    lowerMessage: 'Move with the arrow keys.'
  //    timeline: getTrials 5

  //  train_inspector = new MouselabBlock
  //    blockName: 'train_inspector'
  // special: 'trainClick'
  //    stateDisplay: 'click'
  //    stateClickCost: 0
  //    prompt: ->
  //      markdown """
  //      ## Node Inspector

  //      It's hard to make good decision when you can't see what you're doing!
  //      Fortunately, you have access to a ***node inspector*** which can reveal
  //      the value of a node. To use the node inspector, simply click on a node.
  //      **Note:** you can only use the node inspector when you're on the first
  //      node.

  //      Trying using the node inspector on a few nodes before making your first
  //      move.
  //    """
  //    # but the node inspector takes some time to work and you can only inspect one node at a time.
  //    timeline: getTrials 1
  // lowerMessage: "<b>Click on the nodes to reveal their values.<b>"

  //  train_inspect_cost = new MouselabBlock
  //    blockName: 'train_inspect_cost'
  //    stateDisplay: 'click'
  //    stateClickCost: PARAMS.inspectCost
  //    prompt: ->
  //      markdown """
  //      ## The price of information

  //      You can use node inspector to gain information and make better
  //      decisions. But, as always, there's a catch. Using the node inspector
  //      costs $#{PARAMS.inspectCost} per node. To maximize your score, you have
  //      to know when it's best to gather more information, and when it's time to
  //      act!
  //    """
  //    timeline: getTrials 1
  bonus_text = function(long) {
    var s;
    // if PARAMS.bonusRate isnt .01
    //   throw new Error('Incorrect bonus rate')
    s = "**您游戏中每获得5美元，现实中会有1美分的奖励。**";
    if (long) {
      s += "比如，如果您游戏中获得了$1000, 您现实中会获得$2。";
    }
    return s;
  };
  //  train_final = new MouselabBlock
  //    blockName: 'train_final'
  //    stateDisplay: 'click'
  //    stateClickCost: PARAMS.inspectCost
  //    prompt: ->
  //      markdown """
  //      ## Earn a Big Bonus

  //     Nice! You've learned how to play *Web of Cash*, and you're almost ready
  //      to play it for real. To make things more interesting, you will earn real
  //      money based on how well you play the game. Specifically,
  //      #{bonus_text('long')}

  //      These are the **final practice rounds** before your score starts counting
  //      towards your bonus.
  //    """
  //    lowerMessage: fullMessage
  //    timeline: getTrials 5

  //  train = new Block
  //    training: true
  //    timeline: [
  //      intro0
  //       divider    
  //      train_basic2    
  //      divider
  //      train_hidden
  //      divider
  //      train_inspector
  //       divider
  //      train_inspect_cost
  //      divider
  //       train_final
  //    ]
  instructions = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      return [
        markdown(" <h1> 现金网 </h1>\n\n 在这里, 您将进行一个叫 *现金网* 的游戏。 您将会引导一只\n 贪财的小蜘蛛游走在蜘蛛网中。 当你到达一个小灰圈\n （***节点***） 这个节点的得分就会计入到你的得分之中。\n\n 您需要使用方向键来移动小蜘蛛, 但只能顺着节点之间\n的箭头前进。 下面这张图片展示了游戏开始时您需要操控小蜘蛛的现金网。\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash-unrevealed.png'/>\n"),
        //psiturk.finishInstructions()
        markdown("## 节点探测器\n\n当您不知道结果时很难做出好的决策。\n幸运的是，您会拥有一个 ***节点探测器*** ，通过它您能获得\n节点背后的现金。要使用节点探测器, 仅需 ***点击一个节点***。下方的图片展示了它是如何运作的。 \n\n**注意:** 只有小蜘蛛在起点时您才能使用\n节点探测器。 \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\n  "),
        markdown("## 奖励与花费\n每一个现金网上的节点都包含了最多 <b><font color='green'>$48</font></b> 或最少 <b><font color='red'>$-48</font></b>的奖励。\n- 你可以通过节点探测器来清晰节点是收获还是奖励。\n- 节点探测器的费用是 <b>$1 每次点击</b>。\n\n"),
        markdown("## 补充信息\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n- 每一轮你开始这个游戏节点的奖励都会发生改变，所以你每一轮都需要重新制定一个计划。 \n- **你必须 *至少* 花费7秒在每轮游戏上。** 如果你提前结束了，你必须要等待7秒\n结束才能进入下一轮游戏。      \n\n  "),
        markdown(`## 百炼成钢\n\n- 你可以通过训练学会更好的计划。\n- 在前10轮游戏中, 您将会练习 **现金网**，在那之后，你就可以运用你在训练中学会的在正式游戏中获取奖金。 \n- 必然，您表现的越好，奖金就会越高。\n`),
        markdown("## 小测试\n\n在您开始 *现金网* 之前, 您必须通过一个测试来表明\n您理解了游戏规则。 如果您有题目回答\n不正确, 您将会被带回引导部分， 然后\n重新测试。")
      ];
    }
  });
  quiz = new Block({
    preamble: function() {
      return markdown("# 小测试\n");
    },
    type: 'survey-multi-choice',
    questions: ["节点背后的值范围是多少？", "获得节点奖励的每一次点击需要花费多少钱？", "你会收到奖金吗？", "每轮游戏都一样吗？"],
    options: [['$0 to $50', '$-10 to $10', '$-48 to $48', '$-100 to $100'], ['$0', '$1', '$5', '$10'], ['不会。', '无论我的表现如何，我都会收到1$奖金。', '如果我表现的好，我会收到1$，如果不好，就没有奖金。', '我表现的越好，奖金就越高。'], ['是的。', '不是，在每轮游戏中，现金网节点对应的值都可能不一样。', '不是，现金网的结构每一轮都会改变。']],
    required: [true, true, true, true],
    correct: ['$-48 to $48', '$1', '我表现的越好，奖金就越高。', '不是，在每轮游戏中，现金网节点对应的值都可能不一样。']
  });
  instruct_loop = new Block({
    timeline: [instructions, quiz],
    loop_function: function(data) {
      var c, j, len, ref;
      ref = data[1].correct;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (!c) {
          alert("您至少有一道题错了。 接下来请重新阅读\n引导然后再试一次！");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });
  survey = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# Just one question ...\n");
    },
    questions: ['What have you learned? What are you doing differently now from what you were doing at the beginning of this training session?'],
    button: 'Finish'
  });
  intro1 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Node Inspector\n\nIt's hard to make good decision when you can't see what you will get!\nFortunately, you will have access to a ***node inspector*** which can reveal\nthe value of a node. To use the node inspector, simply ***click on a node***. The image below illustrates how this works, and you can try this out on the **next** screen. \n\n**Note:** you can only use the node inspector when you're on the first\nnode. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n  ");
    }
  });
  intro2 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Finally, ...\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n \nYou will be playing this game for 30 rounds and the rewards on the web will be different each time.     \n\n**You must spend *at least* 7 seconds on each round.**\nIf you finish a round early, you'll have to wait until 7 seconds have\npassed.      \n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n  ");
    }
  });
  pre_test = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'pre_test',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return TRIALS.slice(6, 7);
        default:
          return getTrials(1);
      }
    })(),
    startScore: 50
  });
  training = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return TRIALS; //.slice(6, 8)
        default:
          return getTrials(10);
      }
    })(),
    startScore: 0
  });
  post_test = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'test',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return TRIALS.slice(6, 8);
        default:
          return getTrials(20);
      }
    })(),
    startScore: 50
  });
  verbal_responses = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# Please answer these questions\n");
    },
    questions: ['How did you decide where to click?', 'How did you decide where NOT to click?', 'How did you decide when to stop clicking?', 'Where were you most likely to click at the beginning of each round?', 'Can you describe anything else about your strategy?'],
    button: 'Finish'
  });
  // TODO: ask about the cost of clicking
  finish = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown(`# 您以完成了实验\n\n感谢您的参与。希望您玩的开心，基于您的\n您将会收到奖金\n**$${calculateBonus().toFixed(2)}**.\n\n 请在您提交之前简要地回答如下问题。`);
    },
    //'What did you learn?'    
    //'Was anything confusing or hard to understand?'
    questions: ['您的年龄？', '您的性别认同为？'],
    
    //'Additional coments?'
    button: '提交HIT'
  });
  talk_demo = new Block({
    timeline: [
      // new MouselabBlock
      //   lowerMessage: 'Move with the arrow keys.'
      //   stateDisplay: 'always'
      //   prompt: null
      //   stateClickCost: PARAMS.inspectCost
      //   timeline: getTrials 3
      divider,
      new MouselabBlock({
        stateDisplay: 'click',
        prompt: null,
        stateClickCost: PARAMS.inspectCost,
        timeline: TRIALS.slice(10,
      14)
      })
    ]
  });
  experiment_timeline = (SKIP_INSTRUCTIONS ? [] : [instruct_loop]).concat([
    //intro0
    //train_inspector
    //train_inspect_cost
    //instructions1    
    //intro1
    //intro2    
    //pre_test
    //intro3   
    training,
    //survey,
    divider_training_test,
    test_block_intro,
    post_test,
    //quiz
    //verbal_responses
    finish
  ]);
  // ================================================ #
  // ========= START AND END THE EXPERIMENT ========= #
  // ================================================ #

  // bonus is the total score multiplied by something
  calculateBonus = function() {
    var bonus;
    bonus = SCORE * PARAMS.bonusRate;
    bonus = (Math.round(bonus * 100)) / 100; // round to nearest cent
    return Math.max(0, bonus);
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    })
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    // show_progress_bar: true
    on_finish: function() {
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        psiturk.recordUnstructuredData('final_bonus', calculateBonus());
        //jsPsych.data.displayData();
        console.log('data_saved')
        jsPsych.data.localSave('mydata.csv','csv');//用的jsPsych 5的localsave...
        return save_data();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  });
};
